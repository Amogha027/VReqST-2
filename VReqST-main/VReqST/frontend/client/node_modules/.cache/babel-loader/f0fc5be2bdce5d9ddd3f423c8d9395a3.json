{"ast":null,"code":"var _jsxFileName = \"/home/shambhavi/Documents/SERC/VReqST-v3/VReqST/VReqST-main/VReqST/frontend/client/src/Components/Project/ProjectPage.jsx\";\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, Flex, Spinner, useToast } from \"@chakra-ui/react\";\nimport Axios from \"axios\";\nimport { Step, Steps, useSteps } from \"chakra-ui-steps\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport ProjectPageContent from \"./ProjectPageContent\";\nconst steps = [{\n  label: \"Step 1\",\n  description: \"Scene JSON\"\n}, {\n  label: \"Step 2\",\n  description: \"Asset JSON\"\n}, {\n  label: \"Step 3\",\n  description: \"Action JSON\"\n}, {\n  label: \"Step 4\",\n  description: \"Custom JSON\"\n}, {\n  label: \"Step 5\",\n  description: \"Timeline JSON\"\n}];\n\nconst ProjectPage = () => {\n  const {\n    nextStep,\n    prevStep,\n    setStep,\n    reset,\n    activeStep\n  } = useSteps({\n    initialStep: 0\n  });\n  const [currProject, setcurrProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const {\n    projectid\n  } = useParams();\n  const jwttoken = localStorage.getItem(\"jwtToken\");\n\n  const getProject = async () => {\n    try {\n      const requestOptions = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: jwttoken\n        }\n      };\n      const res = await Axios.get(`http://localhost:5002/api/project/${projectid}`, requestOptions);\n      setcurrProject(res.data);\n      setStep(res.data.step);\n    } catch (error) {\n      toast({\n        title: \"Something went wrong\",\n        status: \"error\",\n        duration: 10000,\n        isClosable: true,\n        position: \"top\"\n      });\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const f = async () => {\n      try {\n        setLoading(true);\n        await getProject();\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    f();\n  }, []);\n  {\n    return loading === true || currProject === null ? React.createElement(React.Fragment, null, React.createElement(Flex, {\n      width: \"80vw\",\n      height: \"85vh\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }))) : React.createElement(Flex, {\n      flexDir: \"column\",\n      minH: \"85vh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Breadcrumb, {\n      spacing: \"8px\",\n      pt: 5,\n      pl: 5,\n      separator: React.createElement(ChevronRightIcon, {\n        color: \"gray.500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(BreadcrumbItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(BreadcrumbLink, {\n      as: Link,\n      to: \"/projects\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Projects\")), React.createElement(BreadcrumbItem, {\n      isCurrentPage: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(BreadcrumbLink, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, currProject.name))), React.createElement(Flex, {\n      flexDir: \"column\",\n      m: \"30px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Steps, {\n      colorScheme: \"yellow\",\n      activeStep: activeStep,\n      onClickStep: step => setStep(step),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, steps.map(({\n      label,\n      description\n    }) => React.createElement(Step, {\n      labelOrientation: \"vertical\",\n      label: label,\n      key: label,\n      description: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(ProjectPageContent, {\n      projectname: currProject.name,\n      nextStep: nextStep,\n      prevStep: prevStep,\n      reset: reset,\n      activeStep: activeStep,\n      stepslen: steps.length,\n      scene: currProject.scene,\n      action: currProject.action,\n      asset: currProject.asset,\n      custom: currProject.custom,\n      timeline: currProject.timeline,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))))));\n  }\n};\n\nexport default ProjectPage;","map":{"version":3,"sources":["/home/shambhavi/Documents/SERC/VReqST-v3/VReqST/VReqST-main/VReqST/frontend/client/src/Components/Project/ProjectPage.jsx"],"names":["ChevronRightIcon","Breadcrumb","BreadcrumbItem","BreadcrumbLink","Flex","Spinner","useToast","Axios","Step","Steps","useSteps","React","useEffect","useState","Link","useParams","ProjectPageContent","steps","label","description","ProjectPage","nextStep","prevStep","setStep","reset","activeStep","initialStep","currProject","setcurrProject","loading","setLoading","toast","projectid","jwttoken","localStorage","getItem","getProject","requestOptions","headers","token","res","get","data","step","error","title","status","duration","isClosable","position","console","log","f","err","name","map","length","scene","action","asset","custom","timeline"],"mappings":"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","sourcesContent":["import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  Flex,\n  Spinner,\n  useToast,\n} from \"@chakra-ui/react\";\nimport Axios from \"axios\";\nimport { Step, Steps, useSteps } from \"chakra-ui-steps\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport ProjectPageContent from \"./ProjectPageContent\";\n\nconst steps = [\n  { label: \"Step 1\", description: \"Scene JSON\" },\n  { label: \"Step 2\", description: \"Asset JSON\" },\n  { label: \"Step 3\", description: \"Action JSON\" },\n  { label: \"Step 4\", description: \"Custom JSON\" },\n  { label: \"Step 5\", description: \"Timeline JSON\" },\n];\n\nconst ProjectPage = () => {\n  const { nextStep, prevStep, setStep, reset, activeStep } = useSteps({\n    initialStep: 0,\n  });\n\n  const [currProject, setcurrProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { projectid } = useParams();\n\n  const jwttoken = localStorage.getItem(\"jwtToken\");\n  const getProject = async () => {\n    try {\n      const requestOptions = {\n        headers: { \"Content-Type\": \"application/json\", token: jwttoken },\n      };\n      const res = await Axios.get(\n        `http://localhost:5002/api/project/${projectid}`,\n        requestOptions\n      );\n\n      setcurrProject(res.data);\n      setStep(res.data.step);\n    } catch (error) {\n      toast({\n        title: \"Something went wrong\",\n        status: \"error\",\n        duration: 10000,\n        isClosable: true,\n        position: \"top\",\n      });\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const f = async () => {\n      try {\n        setLoading(true);\n        await getProject();\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    f();\n  }, []);\n\n  {\n    return loading === true || currProject === null ? (\n      <>\n        <Flex\n          width={\"80vw\"}\n          height={\"85vh\"}\n          justifyContent=\"center\"\n          alignItems={\"center\"}\n        >\n          <Spinner\n            thickness=\"4px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"xl\"\n          />\n        </Flex>\n      </>\n    ) : (\n      <Flex flexDir=\"column\" minH={\"85vh\"}>\n        <Breadcrumb\n          spacing=\"8px\"\n          pt={5}\n          pl={5}\n          separator={<ChevronRightIcon color=\"gray.500\" />}\n        >\n          <BreadcrumbItem>\n            <BreadcrumbLink as={Link} to=\"/projects\">\n              Projects\n            </BreadcrumbLink>\n          </BreadcrumbItem>\n\n          <BreadcrumbItem isCurrentPage>\n            <BreadcrumbLink>{currProject.name}</BreadcrumbLink>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <Flex flexDir={\"column\"} m=\"30px\">\n          <Steps\n            colorScheme=\"yellow\"\n            activeStep={activeStep}\n            onClickStep={(step) => setStep(step)}\n          >\n            {steps.map(({ label, description }) => (\n              <Step\n                labelOrientation=\"vertical\"\n                label={label}\n                key={label}\n                description={description}\n              >\n                <ProjectPageContent\n                  projectname={currProject.name}\n                  nextStep={nextStep}\n                  prevStep={prevStep}\n                  reset={reset}\n                  activeStep={activeStep}\n                  stepslen={steps.length}\n                  scene={currProject.scene}\n                  action={currProject.action}\n                  asset={currProject.asset}\n                  custom={currProject.custom}\n                  timeline={currProject.timeline}\n\n                />\n              </Step>\n            ))}\n          </Steps>\n        </Flex>\n      </Flex>\n    );\n  }\n};\n\nexport default ProjectPage;\n"]},"metadata":{},"sourceType":"module"}