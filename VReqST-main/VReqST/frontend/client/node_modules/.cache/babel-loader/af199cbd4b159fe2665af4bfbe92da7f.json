{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.selectFields = void 0;\n\nvar _ = require(\"lodash\");\n\nexports.selectFields = function (req, fields, locations) {\n  return _(fields).flatMap(function (field) {\n    return _.flatMap(locations, function (location) {\n      return expandField(req, field, location);\n    });\n  }) // Avoid duplicates if multiple field selections would return the same field twice.\n  // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n  // the instance bla.foo would appear twice, and baz.foo once.\n  .uniqWith(isSameFieldInstance).value();\n};\n\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\n\nfunction expandField(req, field, location) {\n  var originalPath = field;\n  var pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  var paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(function (path) {\n    var value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location: location,\n      path: path,\n      originalPath: originalPath,\n      value: value,\n      originalValue: value\n    };\n  });\n}\n\nfunction expandPath(object, path, accumulator) {\n  var segments = _.toPath(path);\n\n  var wildcardPos = segments.indexOf('*');\n\n  if (wildcardPos > -1) {\n    var subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n\n    Object.keys(subObject).map(function (key) {\n      return segments // Before the *\n      .slice(0, wildcardPos) // The part that the * matched\n      .concat(key) // After the *\n      .concat(segments.slice(wildcardPos + 1));\n    }).forEach(function (subPath) {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    var reconstructedPath = segments.reduce(function (prev, segment) {\n      var part = ''; // TODO: Handle brackets?\n\n      if (segment.includes('.')) {\n        // Special char key access\n        part = \"[\\\"\".concat(segment, \"\\\"]\");\n      } else if (/^\\d+$/.test(segment)) {\n        // Index access\n        part = \"[\".concat(segment, \"]\");\n      } else if (prev) {\n        // Object key access\n        part = \".\".concat(segment);\n      } else {\n        // Top level key\n        part = segment;\n      }\n\n      return prev + part;\n    }, '');\n    accumulator.push(reconstructedPath);\n  }\n}","map":{"version":3,"sources":["/home/shambhavi/Documents/SERC/VReqST-v3/VReqST/VReqST-main/VReqST/frontend/node_modules/express-validator/src/select-fields.js"],"names":["Object","defineProperty","exports","value","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","reduce","prev","segment","part","includes","test","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,IAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACAJ,OAAO,CAACE,YAAR,GAAuB,UAACG,GAAD,EAAMC,MAAN,EAAcC,SAAd;AAAA,SAA4BJ,CAAC,CAACG,MAAD,CAAD,CAC9CE,OAD8C,CACtC,UAAAC,KAAK;AAAA,WAAIN,CAAC,CAACK,OAAF,CAAUD,SAAV,EAAqB,UAAAG,QAAQ,EAAI;AACnD,aAAOC,WAAW,CAACN,GAAD,EAAMI,KAAN,EAAaC,QAAb,CAAlB;AACH,KAFqB,CAAJ;AAAA,GADiC,EAI/C;AACA;AACA;AAN+C,GAO9CE,QAP8C,CAOrCC,mBAPqC,EAQ9CZ,KAR8C,EAA5B;AAAA,CAAvB;;AASA,SAASY,mBAAT,CAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AAC/B,SAAOD,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAb,IAAqBF,CAAC,CAACJ,QAAF,KAAeK,CAAC,CAACL,QAA7C;AACH;;AACD,SAASC,WAAT,CAAqBN,GAArB,EAA0BI,KAA1B,EAAiCC,QAAjC,EAA2C;AACvC,MAAMO,YAAY,GAAGR,KAArB;AACA,MAAMS,YAAY,GAAGR,QAAQ,KAAK,SAAb,GAAyBD,KAAK,CAACU,WAAN,EAAzB,GAA+CV,KAApE;AACA,MAAMW,KAAK,GAAG,EAAd;AACAC,EAAAA,UAAU,CAAChB,GAAG,CAACK,QAAD,CAAJ,EAAgBQ,YAAhB,EAA8BE,KAA9B,CAAV;AACA,SAAOA,KAAK,CAACE,GAAN,CAAU,UAAAN,IAAI,EAAI;AACrB,QAAMf,KAAK,GAAGe,IAAI,KAAK,EAAT,GAAcX,GAAG,CAACK,QAAD,CAAjB,GAA8BP,CAAC,CAACoB,GAAF,CAAMlB,GAAG,CAACK,QAAD,CAAT,EAAqBM,IAArB,CAA5C;AACA,WAAO;AACHN,MAAAA,QAAQ,EAARA,QADG;AAEHM,MAAAA,IAAI,EAAJA,IAFG;AAGHC,MAAAA,YAAY,EAAZA,YAHG;AAIHhB,MAAAA,KAAK,EAALA,KAJG;AAKHuB,MAAAA,aAAa,EAAEvB;AALZ,KAAP;AAOH,GATM,CAAP;AAUH;;AACD,SAASoB,UAAT,CAAoBI,MAApB,EAA4BT,IAA5B,EAAkCU,WAAlC,EAA+C;AAC3C,MAAMC,QAAQ,GAAGxB,CAAC,CAACyB,MAAF,CAASZ,IAAT,CAAjB;;AACA,MAAMa,WAAW,GAAGF,QAAQ,CAACG,OAAT,CAAiB,GAAjB,CAApB;;AACA,MAAID,WAAW,GAAG,CAAC,CAAnB,EAAsB;AAClB,QAAME,SAAS,GAAGF,WAAW,KAAK,CAAhB,GAAoBJ,MAApB,GAA6BtB,CAAC,CAACoB,GAAF,CAAME,MAAN,EAAcE,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBH,WAAlB,CAAd,CAA/C;;AACA,QAAI,CAACE,SAAD,IAAc,CAAC5B,CAAC,CAAC8B,YAAF,CAAeF,SAAf,CAAnB,EAA8C;AAC1C;AACH;;AACDjC,IAAAA,MAAM,CAACoC,IAAP,CAAYH,SAAZ,EACKT,GADL,CACS,UAAAa,GAAG;AAAA,aAAIR,QAAQ,CACpB;AADoB,OAEnBK,KAFW,CAEL,CAFK,EAEFH,WAFE,EAGZ;AAHY,OAIXO,MAJW,CAIJD,GAJI,EAKZ;AALY,OAMXC,MANW,CAMJT,QAAQ,CAACK,KAAT,CAAeH,WAAW,GAAG,CAA7B,CANI,CAAJ;AAAA,KADZ,EAQKQ,OARL,CAQa,UAAAC,OAAO,EAAI;AACpBjB,MAAAA,UAAU,CAACI,MAAD,EAASa,OAAT,EAAkBZ,WAAlB,CAAV;AACH,KAVD;AAWH,GAhBD,MAiBK;AACD,QAAMa,iBAAiB,GAAGZ,QAAQ,CAACa,MAAT,CAAgB,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACzD,UAAIC,IAAI,GAAG,EAAX,CADyD,CAEzD;;AACA,UAAID,OAAO,CAACE,QAAR,CAAiB,GAAjB,CAAJ,EAA2B;AACvB;AACAD,QAAAA,IAAI,gBAAQD,OAAR,QAAJ;AACH,OAHD,MAIK,IAAI,QAAQG,IAAR,CAAaH,OAAb,CAAJ,EAA2B;AAC5B;AACAC,QAAAA,IAAI,cAAOD,OAAP,MAAJ;AACH,OAHI,MAIA,IAAID,IAAJ,EAAU;AACX;AACAE,QAAAA,IAAI,cAAOD,OAAP,CAAJ;AACH,OAHI,MAIA;AACD;AACAC,QAAAA,IAAI,GAAGD,OAAP;AACH;;AACD,aAAOD,IAAI,GAAGE,IAAd;AACH,KApByB,EAoBvB,EApBuB,CAA1B;AAqBAjB,IAAAA,WAAW,CAACoB,IAAZ,CAAiBP,iBAAjB;AACH;AACJ","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.selectFields = void 0;\nconst _ = require(\"lodash\");\nexports.selectFields = (req, fields, locations) => _(fields)\n    .flatMap(field => _.flatMap(locations, location => {\n    return expandField(req, field, location);\n}))\n    // Avoid duplicates if multiple field selections would return the same field twice.\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n    // the instance bla.foo would appear twice, and baz.foo once.\n    .uniqWith(isSameFieldInstance)\n    .value();\nfunction isSameFieldInstance(a, b) {\n    return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n    const originalPath = field;\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n    const paths = [];\n    expandPath(req[location], pathToExpand, paths);\n    return paths.map(path => {\n        const value = path === '' ? req[location] : _.get(req[location], path);\n        return {\n            location,\n            path,\n            originalPath,\n            value,\n            originalValue: value,\n        };\n    });\n}\nfunction expandPath(object, path, accumulator) {\n    const segments = _.toPath(path);\n    const wildcardPos = segments.indexOf('*');\n    if (wildcardPos > -1) {\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n        if (!subObject || !_.isObjectLike(subObject)) {\n            return;\n        }\n        Object.keys(subObject)\n            .map(key => segments\n            // Before the *\n            .slice(0, wildcardPos)\n            // The part that the * matched\n            .concat(key)\n            // After the *\n            .concat(segments.slice(wildcardPos + 1)))\n            .forEach(subPath => {\n            expandPath(object, subPath, accumulator);\n        });\n    }\n    else {\n        const reconstructedPath = segments.reduce((prev, segment) => {\n            let part = '';\n            // TODO: Handle brackets?\n            if (segment.includes('.')) {\n                // Special char key access\n                part = `[\"${segment}\"]`;\n            }\n            else if (/^\\d+$/.test(segment)) {\n                // Index access\n                part = `[${segment}]`;\n            }\n            else if (prev) {\n                // Object key access\n                part = `.${segment}`;\n            }\n            else {\n                // Top level key\n                part = segment;\n            }\n            return prev + part;\n        }, '');\n        accumulator.push(reconstructedPath);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}